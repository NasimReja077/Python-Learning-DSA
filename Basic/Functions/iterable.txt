An iterable in Python is an object that can be "iterated over" - meaning it can return its elements one at a time. Here's a detailed explanation:

Iterables are objects that:

Can be looped over using a for loop
Can be used with the iter() function to get an iterator
Allow you to access their elements sequentially
Common types of iterables in Python:

Lists:
my_list = [1, 2, 3, 4]
for item in my_list:  # list is iterable
    print(item)


Strings:
text = "Hello"
for char in text:  # string is iterable
    print(char)  # prints H, e, l, l, o

Tuples:
my_tuple = (1, 2, 3)
for item in my_tuple:  # tuple is iterable
    print(item)

Sets:
my_set = {1, 2, 3}
for item in my_set:  # set is iterable
    print(item)


Dictionaries:
my_dict = {'a': 1, 'b': 2}
for key in my_dict:  # dictionary is iterable
    print(key)  # prints keys by default


Range:
for num in range(3):  # range is iterable
    print(num)  # prints 0, 1, 2

Functions that work with iterables:

map(): Applies a function to every item in the iterable

numbers = [1, 2, 3]
doubled = map(lambda x: x*2, numbers)
print(list(doubled))  # [2, 4, 6]

filter(): Filters items based on a function

numbers = [1, 2, 3, 4]
evens = filter(lambda x: x % 2 == 0, numbers)
print(list(evens))  # [2, 4]


zip(): Combines multiple iterables
a = [1, 2, 3]
b = ['a', 'b', 'c']
for num, letter in zip(a, b):
    print(num, letter)  # prints pairs: 1 a, 2 b, 3 c


Key characteristics of iterables:

They can be used in a for loop
They can be used with unpacking operations (*)
They can be converted to a list using list()
They can be used to create iterators using iter()
Example combining these concepts:


# Creating a list from an iterable (range)
numbers = list(range(5))  # [0, 1, 2, 3, 4]

# Using filter with an iterable
evens = list(filter(lambda x: x % 2 == 0, numbers))  # [0, 2, 4]

# Using map with an iterable
squares = list(map(lambda x: x**2, numbers))  # [0, 1, 4, 9, 16]

# Unpacking an iterable
first, *rest = range(5)  # first = 0, rest = [1, 2, 3, 4]

